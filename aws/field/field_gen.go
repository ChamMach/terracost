// Code generated by "enumer -type=Field -output=field_gen.go -linecomment"; DO NOT EDIT.

package field

import (
	"fmt"
	"strings"
)

const _FieldName = "SKUOfferTermCodeRateCodeTermTypePriceDescriptionEffectiveDateStartingRangeEndingRangeUnitPricePerUnitCurrencyLeaseContractLengthPurchaseOptionOfferingClassProduct FamilyserviceCodeLocationEndpoint TypeTransfer TypeGroupFrom LocationTo LocationInstance TypeStorage MediaVolume TypeTenancyOperating SystemusageTypeCapacityStatusPre Installed S/WVolume API NameDatabase EngineDatabase EditionLicense ModelDeployment Option"

var _FieldIndex = [...]uint16{0, 3, 16, 24, 32, 48, 61, 74, 85, 89, 101, 109, 128, 142, 155, 169, 180, 188, 201, 214, 219, 232, 243, 256, 269, 280, 287, 303, 312, 326, 343, 358, 373, 389, 402, 419}

const _FieldLowerName = "skuoffertermcoderatecodetermtypepricedescriptioneffectivedatestartingrangeendingrangeunitpriceperunitcurrencyleasecontractlengthpurchaseoptionofferingclassproduct familyservicecodelocationendpoint typetransfer typegroupfrom locationto locationinstance typestorage mediavolume typetenancyoperating systemusagetypecapacitystatuspre installed s/wvolume api namedatabase enginedatabase editionlicense modeldeployment option"

func (i Field) String() string {
	if i >= Field(len(_FieldIndex)-1) {
		return fmt.Sprintf("Field(%d)", i)
	}
	return _FieldName[_FieldIndex[i]:_FieldIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FieldNoOp() {
	var x [1]struct{}
	_ = x[SKU-(0)]
	_ = x[OfferTermCode-(1)]
	_ = x[RateCode-(2)]
	_ = x[PurchaseOption-(3)]
	_ = x[PriceDescription-(4)]
	_ = x[EffectiveDate-(5)]
	_ = x[StartingRange-(6)]
	_ = x[EndingRange-(7)]
	_ = x[Unit-(8)]
	_ = x[PricePerUnit-(9)]
	_ = x[Currency-(10)]
	_ = x[TermLength-(11)]
	_ = x[TermPurchaseOption-(12)]
	_ = x[TermOfferingClass-(13)]
	_ = x[ProductFamily-(14)]
	_ = x[ServiceCode-(15)]
	_ = x[Location-(16)]
	_ = x[EndpointType-(17)]
	_ = x[TransferType-(18)]
	_ = x[Group-(19)]
	_ = x[FromLocation-(20)]
	_ = x[ToLocation-(21)]
	_ = x[InstanceType-(22)]
	_ = x[StorageMedia-(23)]
	_ = x[VolumeType-(24)]
	_ = x[Tenancy-(25)]
	_ = x[OperatingSystem-(26)]
	_ = x[UsageType-(27)]
	_ = x[CapacityStatus-(28)]
	_ = x[PreInstalledSW-(29)]
	_ = x[VolumeAPIName-(30)]
	_ = x[DatabaseEngine-(31)]
	_ = x[DatabaseEdition-(32)]
	_ = x[LicenseModel-(33)]
	_ = x[DeploymentOption-(34)]
}

var _FieldValues = []Field{SKU, OfferTermCode, RateCode, PurchaseOption, PriceDescription, EffectiveDate, StartingRange, EndingRange, Unit, PricePerUnit, Currency, TermLength, TermPurchaseOption, TermOfferingClass, ProductFamily, ServiceCode, Location, EndpointType, TransferType, Group, FromLocation, ToLocation, InstanceType, StorageMedia, VolumeType, Tenancy, OperatingSystem, UsageType, CapacityStatus, PreInstalledSW, VolumeAPIName, DatabaseEngine, DatabaseEdition, LicenseModel, DeploymentOption}

var _FieldNameToValueMap = map[string]Field{
	_FieldName[0:3]:          SKU,
	_FieldLowerName[0:3]:     SKU,
	_FieldName[3:16]:         OfferTermCode,
	_FieldLowerName[3:16]:    OfferTermCode,
	_FieldName[16:24]:        RateCode,
	_FieldLowerName[16:24]:   RateCode,
	_FieldName[24:32]:        PurchaseOption,
	_FieldLowerName[24:32]:   PurchaseOption,
	_FieldName[32:48]:        PriceDescription,
	_FieldLowerName[32:48]:   PriceDescription,
	_FieldName[48:61]:        EffectiveDate,
	_FieldLowerName[48:61]:   EffectiveDate,
	_FieldName[61:74]:        StartingRange,
	_FieldLowerName[61:74]:   StartingRange,
	_FieldName[74:85]:        EndingRange,
	_FieldLowerName[74:85]:   EndingRange,
	_FieldName[85:89]:        Unit,
	_FieldLowerName[85:89]:   Unit,
	_FieldName[89:101]:       PricePerUnit,
	_FieldLowerName[89:101]:  PricePerUnit,
	_FieldName[101:109]:      Currency,
	_FieldLowerName[101:109]: Currency,
	_FieldName[109:128]:      TermLength,
	_FieldLowerName[109:128]: TermLength,
	_FieldName[128:142]:      TermPurchaseOption,
	_FieldLowerName[128:142]: TermPurchaseOption,
	_FieldName[142:155]:      TermOfferingClass,
	_FieldLowerName[142:155]: TermOfferingClass,
	_FieldName[155:169]:      ProductFamily,
	_FieldLowerName[155:169]: ProductFamily,
	_FieldName[169:180]:      ServiceCode,
	_FieldLowerName[169:180]: ServiceCode,
	_FieldName[180:188]:      Location,
	_FieldLowerName[180:188]: Location,
	_FieldName[188:201]:      EndpointType,
	_FieldLowerName[188:201]: EndpointType,
	_FieldName[201:214]:      TransferType,
	_FieldLowerName[201:214]: TransferType,
	_FieldName[214:219]:      Group,
	_FieldLowerName[214:219]: Group,
	_FieldName[219:232]:      FromLocation,
	_FieldLowerName[219:232]: FromLocation,
	_FieldName[232:243]:      ToLocation,
	_FieldLowerName[232:243]: ToLocation,
	_FieldName[243:256]:      InstanceType,
	_FieldLowerName[243:256]: InstanceType,
	_FieldName[256:269]:      StorageMedia,
	_FieldLowerName[256:269]: StorageMedia,
	_FieldName[269:280]:      VolumeType,
	_FieldLowerName[269:280]: VolumeType,
	_FieldName[280:287]:      Tenancy,
	_FieldLowerName[280:287]: Tenancy,
	_FieldName[287:303]:      OperatingSystem,
	_FieldLowerName[287:303]: OperatingSystem,
	_FieldName[303:312]:      UsageType,
	_FieldLowerName[303:312]: UsageType,
	_FieldName[312:326]:      CapacityStatus,
	_FieldLowerName[312:326]: CapacityStatus,
	_FieldName[326:343]:      PreInstalledSW,
	_FieldLowerName[326:343]: PreInstalledSW,
	_FieldName[343:358]:      VolumeAPIName,
	_FieldLowerName[343:358]: VolumeAPIName,
	_FieldName[358:373]:      DatabaseEngine,
	_FieldLowerName[358:373]: DatabaseEngine,
	_FieldName[373:389]:      DatabaseEdition,
	_FieldLowerName[373:389]: DatabaseEdition,
	_FieldName[389:402]:      LicenseModel,
	_FieldLowerName[389:402]: LicenseModel,
	_FieldName[402:419]:      DeploymentOption,
	_FieldLowerName[402:419]: DeploymentOption,
}

var _FieldNames = []string{
	_FieldName[0:3],
	_FieldName[3:16],
	_FieldName[16:24],
	_FieldName[24:32],
	_FieldName[32:48],
	_FieldName[48:61],
	_FieldName[61:74],
	_FieldName[74:85],
	_FieldName[85:89],
	_FieldName[89:101],
	_FieldName[101:109],
	_FieldName[109:128],
	_FieldName[128:142],
	_FieldName[142:155],
	_FieldName[155:169],
	_FieldName[169:180],
	_FieldName[180:188],
	_FieldName[188:201],
	_FieldName[201:214],
	_FieldName[214:219],
	_FieldName[219:232],
	_FieldName[232:243],
	_FieldName[243:256],
	_FieldName[256:269],
	_FieldName[269:280],
	_FieldName[280:287],
	_FieldName[287:303],
	_FieldName[303:312],
	_FieldName[312:326],
	_FieldName[326:343],
	_FieldName[343:358],
	_FieldName[358:373],
	_FieldName[373:389],
	_FieldName[389:402],
	_FieldName[402:419],
}

// FieldString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FieldString(s string) (Field, error) {
	if val, ok := _FieldNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FieldNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Field values", s)
}

// FieldValues returns all values of the enum
func FieldValues() []Field {
	return _FieldValues
}

// FieldStrings returns a slice of all String values of the enum
func FieldStrings() []string {
	strs := make([]string, len(_FieldNames))
	copy(strs, _FieldNames)
	return strs
}

// IsAField returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Field) IsAField() bool {
	for _, v := range _FieldValues {
		if i == v {
			return true
		}
	}
	return false
}
